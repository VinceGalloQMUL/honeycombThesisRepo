useYlimitForArea <- false
if (forPaper) {
par(mfrow = c(1,2))
} else {
par(mfrow = c(1,1))
}
stage1mean<-mean(sdStart)
stage2mean<-mean(sdEnd)
startdiff<-sdStart - stage1mean
startdiff2<-sdStart - stage2mean
endDiff<-sdEnd - stage2mean
cSmaller <- length(sdChange[sdChange < 0])
cLarger <- length(sdChange[sdChange >= 0])
sdChangeToAv <- (startdiff - endDiff) * sign(startdiff)
cNeg <- length(sdChangeToAv[sdChangeToAv < 0])
cPos <- length(sdChangeToAv[sdChangeToAv >= 0])
print(c(cSmaller, cLarger, cNeg, cPos))
xaxisStr <- sprintf("%d cells measured at %s and %s (%d/%d closer to mean)", length(commonIDs), classNames[1], classNames[2], cPos, (cNeg + cPos))
if (forPaper) {
if(useYlimitForArea) {
ymax <- max(max(sdStart), max(sdEnd), max(sdChange))
ymin <- -10 # min(min(sdStart), min(sdEnd), min(sdChange))
boxplot(sdStart, sdEnd, sdChange, col=colrs, names = classNames, main = "a",ylab = yaxisStr, ylim = c(ymin, ymax))
} else {
boxplot(sdStart, sdEnd, sdChange, col=colrs, names = classNames, main = "a",ylab = yaxisStr)
}
} else {
boxplot(sdStart, sdEnd, sdChange, sdChangeToAv, col=colrs[c(1,2,3,3)], names = c(classNames, "Toward mean"), main = titleStr,ylab = yaxisStr, xlab = xaxisStr)
legend("topright", legend = classNames, col = colrs[c(1,2,3,3)], pch = 15, bty = "n", pt.cex = 1.0, cex = 1.0, horiz = F)
}
segments(1, sdStart[seq(1,length(sdStart),10)], 2, sdEnd[seq(1,length(sdEnd),10)], lty="dashed")
abline( h = 0, lty = 2)
################# start, end, change and towards mean #######################
################# plot of change and towards mean #######################
titleStr<-sprintf("Change of %s %s", titleStrPre, "\nrelative to the value at stage 1")
## produce figs 1.12
s2change<- (sdEnd - sdStart)
#xmax <- max(sdStart)
xmax <- max(startdiff2)
xmin <- min(startdiff2) # 0
ymax <- max(s2change)
ymin <- min(s2change) # 0
titleStr<-sprintf("%s %s", yaxisStr, "change related to deviation from mean")
if (forPaper) {
xmax <- max(sdStart)
xmin <- min(sdStart) # 0
ymax <- max(max(sdStart), max(sdEnd), max(sdChange))
ymin <- -10 # min(min(sdStart), min(sdEnd), min(sdChange))
plot (sdStart,s2change,main = "b",ylab = sprintf("Change in %s", yaxisStr), xlab = sprintf("%s %s", yaxisStr, "at stage 1"), ylim = c(ymin, ymax), xlim = c(xmin, xmax), xaxs = 'i')
trend<-lm(s2change ~ sdStart)
#abline( v = stage2mean, lty = 2)
} else {
plot (startdiff2,s2change,ylab = sprintf("Change in %s", yaxisStr), xlab = sprintf("%s %s", yaxisStr, "at stage 1 relative to Stage 2"), xlim = c(xmin, xmax))
legend("topright", legend = classNames, col = colrs[c(1,2,3,3)], pch = 15, bty = "n", pt.cex = 1.0, cex = 1.0, horiz = F)
trend<-lm(s2change ~ startdiff2)
abline( v = 0, lty = 2)
}
summary(trend)
abline(trend, lty = 3)
abline( h = 0, lty = 2)
TRUE
FALSE
true
useYlimitForArea <- FALSE
if (forPaper) {
par(mfrow = c(1,2))
} else {
par(mfrow = c(1,1))
}
stage1mean<-mean(sdStart)
stage2mean<-mean(sdEnd)
startdiff<-sdStart - stage1mean
startdiff2<-sdStart - stage2mean
endDiff<-sdEnd - stage2mean
cSmaller <- length(sdChange[sdChange < 0])
cLarger <- length(sdChange[sdChange >= 0])
sdChangeToAv <- (startdiff - endDiff) * sign(startdiff)
cNeg <- length(sdChangeToAv[sdChangeToAv < 0])
cPos <- length(sdChangeToAv[sdChangeToAv >= 0])
print(c(cSmaller, cLarger, cNeg, cPos))
xaxisStr <- sprintf("%d cells measured at %s and %s (%d/%d closer to mean)", length(commonIDs), classNames[1], classNames[2], cPos, (cNeg + cPos))
if (forPaper) {
if(useYlimitForArea) {
ymax <- max(max(sdStart), max(sdEnd), max(sdChange))
ymin <- -10 # min(min(sdStart), min(sdEnd), min(sdChange))
boxplot(sdStart, sdEnd, sdChange, col=colrs, names = classNames, main = "a",ylab = yaxisStr, ylim = c(ymin, ymax))
} else {
boxplot(sdStart, sdEnd, sdChange, col=colrs, names = classNames, main = "a",ylab = yaxisStr)
}
} else {
boxplot(sdStart, sdEnd, sdChange, sdChangeToAv, col=colrs[c(1,2,3,3)], names = c(classNames, "Toward mean"), main = titleStr,ylab = yaxisStr, xlab = xaxisStr)
legend("topright", legend = classNames, col = colrs[c(1,2,3,3)], pch = 15, bty = "n", pt.cex = 1.0, cex = 1.0, horiz = F)
}
segments(1, sdStart[seq(1,length(sdStart),10)], 2, sdEnd[seq(1,length(sdEnd),10)], lty="dashed")
abline( h = 0, lty = 2)
################# start, end, change and towards mean #######################
################# plot of change and towards mean #######################
titleStr<-sprintf("Change of %s %s", titleStrPre, "\nrelative to the value at stage 1")
## produce figs 1.12
s2change<- (sdEnd - sdStart)
#xmax <- max(sdStart)
xmax <- max(startdiff2)
xmin <- min(startdiff2) # 0
ymax <- max(s2change)
ymin <- min(s2change) # 0
titleStr<-sprintf("%s %s", yaxisStr, "change related to deviation from mean")
if (forPaper) {
xmax <- max(sdStart)
xmin <- min(sdStart) # 0
ymax <- max(max(sdStart), max(sdEnd), max(sdChange))
ymin <- -10 # min(min(sdStart), min(sdEnd), min(sdChange))
plot (sdStart,s2change,main = "b",ylab = sprintf("Change in %s", yaxisStr), xlab = sprintf("%s %s", yaxisStr, "at stage 1"), ylim = c(ymin, ymax), xlim = c(xmin, xmax), xaxs = 'i')
trend<-lm(s2change ~ sdStart)
#abline( v = stage2mean, lty = 2)
} else {
plot (startdiff2,s2change,ylab = sprintf("Change in %s", yaxisStr), xlab = sprintf("%s %s", yaxisStr, "at stage 1 relative to Stage 2"), xlim = c(xmin, xmax))
legend("topright", legend = classNames, col = colrs[c(1,2,3,3)], pch = 15, bty = "n", pt.cex = 1.0, cex = 1.0, horiz = F)
trend<-lm(s2change ~ startdiff2)
abline( v = 0, lty = 2)
}
summary(trend)
abline(trend, lty = 3)
abline( h = 0, lty = 2)
if (forPaper) {
par(mfrow = c(1,2))
} else {
par(mfrow = c(1,1))
}
stage1mean<-mean(sdStart)
stage2mean<-mean(sdEnd)
startdiff<-sdStart - stage1mean
startdiff2<-sdStart - stage2mean
endDiff<-sdEnd - stage2mean
cSmaller <- length(sdChange[sdChange < 0])
cLarger <- length(sdChange[sdChange >= 0])
sdChangeToAv <- (startdiff - endDiff) * sign(startdiff)
cNeg <- length(sdChangeToAv[sdChangeToAv < 0])
cPos <- length(sdChangeToAv[sdChangeToAv >= 0])
print(c(cSmaller, cLarger, cNeg, cPos))
xaxisStr <- sprintf("%d cells measured at %s and %s (%d/%d closer to mean)", length(commonIDs), classNames[1], classNames[2], cPos, (cNeg + cPos))
if (forPaper) {
if(useYlimitForArea) {
ymax <- max(max(sdStart), max(sdEnd), max(sdChange))
ymin <- -10 # min(min(sdStart), min(sdEnd), min(sdChange))
boxplot(sdStart, sdEnd, sdChange, col=colrs, names = classNames, main = "a",ylab = yaxisStr, ylim = c(ymin, ymax))
} else {
boxplot(sdStart, sdEnd, sdChange, col=colrs, names = classNames, main = "a",ylab = yaxisStr)
}
} else {
boxplot(sdStart, sdEnd, sdChange, sdChangeToAv, col=colrs[c(1,2,3,3)], names = c(classNames, "Toward mean"), main = titleStr,ylab = yaxisStr, xlab = xaxisStr)
legend("topright", legend = classNames, col = colrs[c(1,2,3,3)], pch = 15, bty = "n", pt.cex = 1.0, cex = 1.0, horiz = F)
}
segments(1, sdStart[seq(1,length(sdStart),10)], 2, sdEnd[seq(1,length(sdEnd),10)], lty="dashed")
abline( h = 0, lty = 2)
################# start, end, change and towards mean #######################
################# plot of change and towards mean #######################
titleStr<-sprintf("Change of %s %s", titleStrPre, "\nrelative to the value at stage 1")
## produce figs 1.12
s2change<- (sdEnd - sdStart)
#xmax <- max(sdStart)
xmax <- max(startdiff2)
xmin <- min(startdiff2) # 0
ymax <- max(s2change)
ymin <- min(s2change) # 0
titleStr<-sprintf("%s %s", yaxisStr, "change related to deviation from mean")
if (forPaper) {
xmax <- max(sdStart)
xmin <- min(sdStart) # 0
if(useYlimitForArea) {
ymax <- max(max(sdStart), max(sdEnd), max(sdChange))
ymin <- -10 # min(min(sdStart), min(sdEnd), min(sdChange))
plot (sdStart,s2change,main = "b",ylab = sprintf("Change in %s", yaxisStr), xlab = sprintf("%s %s", yaxisStr, "at stage 1"), ylim = c(ymin, ymax), xlim = c(xmin, xmax), xaxs = 'i')
} else {
plot (sdStart,s2change,main = "b",ylab = sprintf("Change in %s", yaxisStr), xlab = sprintf("%s %s", yaxisStr, "at stage 1"), xlim = c(xmin, xmax), xaxs = 'i')
}
trend<-lm(s2change ~ sdStart)
#abline( v = stage2mean, lty = 2)
} else {
plot (startdiff2,s2change,ylab = sprintf("Change in %s", yaxisStr), xlab = sprintf("%s %s", yaxisStr, "at stage 1 relative to Stage 2"), xlim = c(xmin, xmax))
legend("topright", legend = classNames, col = colrs[c(1,2,3,3)], pch = 15, bty = "n", pt.cex = 1.0, cex = 1.0, horiz = F)
trend<-lm(s2change ~ startdiff2)
abline( v = 0, lty = 2)
}
summary(trend)
abline(trend, lty = 3)
abline( h = 0, lty = 2)
measureStr <- "cell area"
valNames <- c("", "areaMM2")
SDmeasureStr <- "Cell area"
SDmeasureStr <- sprintf("Sigma %s", tolower(measureStr))
#plotTwoPlus(cellWallsPair, "imageIdx", valNames[1], "dist", stage1DistStr, measureStr, stage2DistStr, measureStr, bandedStr, boxplotYstr, layoutLocs, atLocs, TRUE)
#plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, SDmeasureStr, bandedStr, boxplotYstr,  layoutLocs, atLocs, TRUE, -1, cols = boxCols, limitDist = histWidth)
plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, "", bandedStr, "",  layoutLocs, atLocs, TRUE, -1, cols = boxCols, limitDist = histWidth)
par(mfrow = c(1,3))
SDmeasureStr <- sprintf("Sigma %s", tolower(measureStr))
#plotTwoPlus(cellWallsPair, "imageIdx", valNames[1], "dist", stage1DistStr, measureStr, stage2DistStr, measureStr, bandedStr, boxplotYstr, layoutLocs, atLocs, TRUE)
#plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, SDmeasureStr, bandedStr, boxplotYstr,  layoutLocs, atLocs, TRUE, -1, cols = boxCols, limitDist = histWidth)
plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, "", bandedStr, "",  layoutLocs, atLocs, TRUE, -1, cols = boxCols, limitDist = histWidth)
cellsPair
sdEnd
cellsPair[cellsPair[,"imageIdx"] == 0,"areaMM2"]
mean(cellsPair[cellsPair[,"imageIdx"] == 0,"areaMM2"])
mean(cellsPair[cellsPair[,"imageIdx"] == 1,"areaMM2"])
sd(cellsPair[cellsPair[,"imageIdx"] == 0,"areaMM2"])
sd(cellsPair[cellsPair[,"imageIdx"] == 1,"areaMM2"])
length(cellsPair[cellsPair[,"imageIdx"] == 1,"areaMM2"])
length(cellsPair[cellsPair[,"imageIdx"] == 0,"areaMM2"])
testSet0<-abs(vals[vals[,"classDist"] == 0,"areaMM2"])
testSet1<-abs(vals[vals[,"classDist"] == (0.5),"areaMM2"])
testSet0<-abs(cellsPair[cellsPair[,"classDist"] == 0,"areaMM2"])
testSet1<-abs(cellsPair[cellsPair[,"classDist"] == (0.5),"areaMM2"])
length(testSet0)
length(testSet1)
sumary(testSet1)
summary(testSet1)
summary(testSet0)
testSet2<-abs(cellsPair[cellsPair[,"classDist"] == 1,"areaMM2"])
testSet3<-abs(cellsPair[cellsPair[,"classDist"] == (1.5),"areaMM2"])
summary(testSet2)
summary(testSet3)
testSet4<-abs(cellsPair[cellsPair[,"classDist"] == 2,"areaMM2"])
testSet5<-abs(cellsPair[cellsPair[,"classDist"] == (2.5),"areaMM2"])
summary(testSet4)
summary(testSet5)
length(testSet5)
length(testSet4)
t.test(testSet4, testSet5)
sd(testSet4)
sd(testSet5)
meanAreaAtDistance1 = mean(testSet4)
meanAreaAtDistance2 = mean(testSet5)
testDelta0 <- testSet0 - meanAreaAtDistance1
testDelta1 <- testSet1 - meanAreaAtDistance2
plotTwoPlus<-function(vals, idxName, Yname, Xname,aXlab, aYlab, bXlab, bYlab, hXlab, hYlab, className, layoutLocs, absY = FALSE, maxY = -1, base0 = 0, base1 = 0) {
plotPairByIndexAbsX(vals, idxName, Yname, Xname,aXlab, aYlab, bXlab, bYlab, absY, maxY)
testSet0<-abs(vals[vals[,className] == 0,Yname]) - base0
testSet1<-abs(vals[vals[,className] == (0.5),Yname]) - base1
YaxisLim<- axisRange(testSet0, testSet0)
if (maxY >0) {
YaxisLim[2]<-maxY
}
boxplot(testSet0 , testSet1, names = c("Stage 1", "Stage 2"), ylim=YaxisLim, xlab = hXlab, ylab = hYlab)
TtestW<-wilcox.test( testSet0, testSet1)
probmax <- TtestW$p.value
print(c(length(testSet0), length(testSet1), probmax, mean(testSet0), mean(testSet1), sd(testSet0), sd(testSet1)))
}
plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, "", bandedStr, "",  layoutLocs, atLocs, TRUE, -1, cols = boxCols, limitDist = histWidth)
plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, "", bandedStr, "",  layoutLocs, atLocs, TRUE, -1, 0, 0, cols = boxCols, limitDist = histWidth)
plotTwoPlus<-function(vals, idxName, Yname, Xname,aXlab, aYlab, bXlab, bYlab, hXlab, hYlab, className, layoutLocs, absY = FALSE, maxY = -1, cols = NULL, limitDist = 0, base0 = 0, base1 = 0) {
plotPairByIndexAbsX(vals, idxName, Yname, Xname,aXlab, aYlab, bXlab, bYlab, absY, maxY,  limitDist)
testSet0<-abs(vals[vals[,className] == 0,Yname]) - base0
testSet1<-abs(vals[vals[,className] == (0.5),Yname]) - base1
YaxisLim<- axisRange(testSet0, testSet0)
if (maxY >0) {
YaxisLim[2]<-maxY
}
boxplot(testSet0 , testSet1, names = c("Stage 1", "Stage 2"), main = "C", ylim=YaxisLim, xlab = hXlab, ylab = hYlab, col = cols)
TtestW<-wilcox.test( testSet0, testSet1)
probmax <- TtestW$p.value
print(c(length(testSet0), length(testSet1), probmax, mean(testSet0), mean(testSet1), sd(testSet0), sd(testSet1)))
}
plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, "", bandedStr, "",  layoutLocs, atLocs, TRUE, -1, cols = boxCols, limitDist = histWidth)
plotPairByIndexAbsX<-function(vals, idxName, Yname, Xname,aXlab, aYlab, bXlab, bYlab, absY = FALSE, maxY = -1,  limitDist = 0) {
XaxisLim<-c(0,20)
if (absY) {
YaxisLim<- axisRange(abs(vals[vals[,idxName] == 0,Yname]), abs(vals[vals[,idxName] == 1,Yname]))
if (maxY >0) {
YaxisLim[2]<-maxY
}
#print(YaxisLim)
plot (abs(vals[vals[,idxName] == 0,Yname]) ~ abs(vals[vals[,idxName] == 0,Xname]), xlim=XaxisLim, ylim=YaxisLim , xlab = aXlab, ylab = aYlab, main = "a")
if (limitDist > 0) {
abline(v=limitDist, lty=2)
}
plot (abs(vals[vals[,idxName] == 1,Yname]) ~ abs(vals[vals[,idxName] == 1,Xname]), xlim=XaxisLim, ylim=YaxisLim , xlab = bXlab, ylab = bYlab, main = "b")
if (limitDist > 0) {
abline(v=limitDist, lty=2)
}
} else {
YaxisLim<- axisRange(vals[vals[,idxName] == 0,Yname], vals[vals[,idxName] == 1,Yname])
if (maxY >0) {
YaxisLim[2]<-maxY
}
#print(YaxisLim)
plot (vals[vals[,idxName] == 0,Yname] ~ abs(vals[vals[,idxName] == 0,Xname]), xlim=XaxisLim, ylim=YaxisLim , xlab = aXlab, ylab = aYlab, main = "a")
if (limitDist > 0) {
abline(v=limitDist, lty=2)
}
plot (vals[vals[,idxName] == 1,Yname] ~ abs(vals[vals[,idxName] == 1,Xname]), xlim=XaxisLim, ylim=YaxisLim , xlab = bXlab, ylab = bYlab, main = "b")
if (limitDist > 0) {
abline(v=limitDist, lty=2)
}
}
}
plotTwoPlus<-function(vals, idxName, Yname, Xname,aXlab, aYlab, bXlab, bYlab, hXlab, hYlab, className, layoutLocs, absY = FALSE, maxY = -1, cols = NULL, limitDist = 0, base0 = 0, base1 = 0) {
plotPairByIndexAbsX(vals, idxName, Yname, Xname,aXlab, aYlab, bXlab, bYlab, absY, maxY,  limitDist)
testSet0<-abs(vals[vals[,className] == 0,Yname]) - base0
testSet1<-abs(vals[vals[,className] == (0.5),Yname]) - base1
YaxisLim<- axisRange(testSet0, testSet0)
if (maxY >0) {
YaxisLim[2]<-maxY
}
boxplot(testSet0 , testSet1, names = c("Stage 1", "Stage 2"), main = "c", ylim=YaxisLim, xlab = hXlab, ylab = hYlab, col = cols)
TtestW<-wilcox.test( testSet0, testSet1)
probmax <- TtestW$p.value
print(c(length(testSet0), length(testSet1), probmax, mean(testSet0), mean(testSet1), sd(testSet0), sd(testSet1)))
}
plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, "", bandedStr, "",  layoutLocs, atLocs, TRUE, -1, cols = boxCols, limitDist = histWidth)
plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, "", bandedStr, "",  layoutLocs, atLocs, TRUE, -1, cols = boxCols, limitDist = histWidth, 24, 24)
plotPairByIndexAbsX<-function(vals, idxName, Yname, Xname,aXlab, aYlab, bXlab, bYlab, absY = FALSE, maxY = -1,  limitDist = 0, base0 = 0, base1 = 0) {
XaxisLim<-c(0,20)
set0Y <- vals[vals[,idxName] == 0,Yname] - base0
set1Y <- vals[vals[,idxName] == 1,Yname] - base1
set0X <- vals[vals[,idxName] == 0,Xname]
set1X <- vals[vals[,idxName] == 1,Xname]
if (absY) {
set0Y <- abs(set0Y)
set1Y <- abs(set1Y)
set0X <- abs(set0X)
set1X <- abs(set1X)
}
YaxisLim<- axisRange(set00, set01)
if (maxY >0) {
YaxisLim[2]<-maxY
}
#print(YaxisLim)
plot (set0Y ~ abs(set0X), xlim=XaxisLim, ylim=YaxisLim , xlab = aXlab, ylab = aYlab, main = "a")
if (limitDist > 0) {
abline(v=limitDist, lty=2)
}
plot (set1Y ~ abs(set1X), xlim=XaxisLim, ylim=YaxisLim , xlab = bXlab, ylab = bYlab, main = "b")
if (limitDist > 0) {
abline(v=limitDist, lty=2)
}
}
plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, "", bandedStr, "",  layoutLocs, atLocs, TRUE, -1, cols = boxCols, limitDist = histWidth, 24, 24)
plotPairByIndexAbsX<-function(vals, idxName, Yname, Xname,aXlab, aYlab, bXlab, bYlab, absY = FALSE, maxY = -1,  limitDist = 0, base0 = 0, base1 = 0) {
XaxisLim<-c(0,20)
set0Y <- vals[vals[,idxName] == 0,Yname] - base0
set1Y <- vals[vals[,idxName] == 1,Yname] - base1
set0X <- vals[vals[,idxName] == 0,Xname]
set1X <- vals[vals[,idxName] == 1,Xname]
if (absY) {
set0Y <- abs(set0Y)
set1Y <- abs(set1Y)
set0X <- abs(set0X)
set1X <- abs(set1X)
}
YaxisLim<- axisRange(set0Y, set1Y)
if (maxY >0) {
YaxisLim[2]<-maxY
}
#print(YaxisLim)
plot (set0Y ~ abs(set0X), xlim=XaxisLim, ylim=YaxisLim , xlab = aXlab, ylab = aYlab, main = "a")
if (limitDist > 0) {
abline(v=limitDist, lty=2)
}
plot (set1Y ~ abs(set1X), xlim=XaxisLim, ylim=YaxisLim , xlab = bXlab, ylab = bYlab, main = "b")
if (limitDist > 0) {
abline(v=limitDist, lty=2)
}
}
plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, "", bandedStr, "",  layoutLocs, atLocs, TRUE, -1, cols = boxCols, limitDist = histWidth, 24, 24)
plotTwoPlus<-function(vals, idxName, Yname, Xname,aXlab, aYlab, bXlab, bYlab, hXlab, hYlab, className, layoutLocs, absY = FALSE, maxY = -1, cols = NULL, limitDist = 0, base0 = 0, base1 = 0) {
plotPairByIndexAbsX(vals, idxName, Yname, Xname,aXlab, aYlab, bXlab, bYlab, absY, maxY,  limitDist, base0, base1)
testSet0<-abs(vals[vals[,className] == 0,Yname]) - base0
testSet1<-abs(vals[vals[,className] == (0.5),Yname]) - base1
YaxisLim<- axisRange(testSet0, testSet0)
if (maxY >0) {
YaxisLim[2]<-maxY
}
boxplot(testSet0 , testSet1, names = c("Stage 1", "Stage 2"), main = "c", ylim=YaxisLim, xlab = hXlab, ylab = hYlab, col = cols)
TtestW<-wilcox.test( testSet0, testSet1)
probmax <- TtestW$p.value
print(c(length(testSet0), length(testSet1), probmax, mean(testSet0), mean(testSet1), sd(testSet0), sd(testSet1)))
}
plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, "", bandedStr, "",  layoutLocs, atLocs, TRUE, -1, cols = boxCols, limitDist = histWidth, 24, 24)
plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, "", bandedStr, "",  layoutLocs, atLocs, FALSE, -1, cols = boxCols, limitDist = histWidth, 24, 24)
measureStr <- "cell area"
valNames <- c("", "areaMM2")
SDmeasureStr <- "Cell area"
dispAbs <- FALSE
testSet4<-abs(cellsPair[cellsPair[,"classDist"] == 2,valNames[2]])
testSet5<-abs(cellsPair[cellsPair[,"classDist"] == (2.5),valNames[2]])
meanAreaAtDistance = mean(c(testSet4 , testSet5))
baseVal <- 0
SDmeasureStr <- sprintf("Delta %s", tolower(measureStr))
#plotTwoPlus(cellWallsPair, "imageIdx", valNames[1], "dist", stage1DistStr, measureStr, stage2DistStr, measureStr, bandedStr, boxplotYstr, layoutLocs, atLocs, TRUE)
#plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, SDmeasureStr, bandedStr, boxplotYstr,  layoutLocs, atLocs, TRUE, -1, cols = boxCols, limitDist = histWidth)
plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, "", bandedStr, "",  layoutLocs, atLocs, dispAbs, -1, 0, 0, cols = boxCols, limitDist = histWidth, baseVal, baseVal)
plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, "", bandedStr, "",  layoutLocs, atLocs, dispAbs, -1, cols = boxCols, limitDist = histWidth, baseVal, baseVal)
baseVal
measureStr <- "cell area"
valNames <- c("", "areaMM2")
SDmeasureStr <- "Cell area"
dispAbs <- FALSE
testSet4<-abs(cellsPair[cellsPair[,"classDist"] == 2,valNames[2]])
testSet5<-abs(cellsPair[cellsPair[,"classDist"] == (2.5),valNames[2]])
meanAreaAtDistance = mean(c(testSet4 , testSet5))
baseVal <- meanAreaAtDistance
SDmeasureStr <- sprintf("Delta %s", tolower(measureStr))
#plotTwoPlus(cellWallsPair, "imageIdx", valNames[1], "dist", stage1DistStr, measureStr, stage2DistStr, measureStr, bandedStr, boxplotYstr, layoutLocs, atLocs, TRUE)
#plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, SDmeasureStr, bandedStr, boxplotYstr,  layoutLocs, atLocs, TRUE, -1, cols = boxCols, limitDist = histWidth)
plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, "", bandedStr, "",  layoutLocs, atLocs, dispAbs, -1, cols = boxCols, limitDist = histWidth, baseVal, baseVal)
plotTwoPlus<-function(vals, idxName, Yname, Xname,aXlab, aYlab, bXlab, bYlab, hXlab, hYlab, className, layoutLocs, absY = FALSE, maxY = -1, cols = NULL, limitDist = 0, base0 = 0, base1 = 0) {
plotPairByIndexAbsX(vals, idxName, Yname, Xname,aXlab, aYlab, bXlab, bYlab, absY, maxY,  limitDist, base0, base1)
set0Y <- vals[vals[,idxName] == 0,Yname] - base0
set1Y <- vals[vals[,idxName] == 1,Yname] - base1
if (absY) {
set0Y <- abs(set0Y)
set1Y <- abs(set1Y)
}
YaxisLim<- axisRange(set0Y, set1Y)
testSet0<-abs(vals[vals[,className] == 0,Yname]) - base0
testSet1<-abs(vals[vals[,className] == (0.5),Yname]) - base1
YaxisLimPlus<- axisRange(testSet0, testSet0)
YaxisLim[1] <- min(YaxisLim[1], YaxisLimPlus[1])
YaxisLim[2] <- min(YaxisLim[2], YaxisLimPlus[2])
if (maxY >0) {
YaxisLim[2]<-maxY
}
boxplot(testSet0 , testSet1, names = c("Stage 1", "Stage 2"), main = "c", ylim=YaxisLim, xlab = hXlab, ylab = hYlab, col = cols)
TtestW<-wilcox.test( testSet0, testSet1)
probmax <- TtestW$p.value
print(c(length(testSet0), length(testSet1), probmax, mean(testSet0), mean(testSet1), sd(testSet0), sd(testSet1)))
}
measureStr <- "cell area"
valNames <- c("", "areaMM2")
SDmeasureStr <- "Cell area"
dispAbs <- FALSE
testSet4<-abs(cellsPair[cellsPair[,"classDist"] == 2,valNames[2]])
testSet5<-abs(cellsPair[cellsPair[,"classDist"] == (2.5),valNames[2]])
meanAreaAtDistance = mean(c(testSet4 , testSet5))
baseVal <- meanAreaAtDistance
SDmeasureStr <- sprintf("Delta %s", tolower(measureStr))
#plotTwoPlus(cellWallsPair, "imageIdx", valNames[1], "dist", stage1DistStr, measureStr, stage2DistStr, measureStr, bandedStr, boxplotYstr, layoutLocs, atLocs, TRUE)
#plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, SDmeasureStr, bandedStr, boxplotYstr,  layoutLocs, atLocs, TRUE, -1, cols = boxCols, limitDist = histWidth)
plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, "", bandedStr, "",  layoutLocs, atLocs, dispAbs, -1, cols = boxCols, limitDist = histWidth, baseVal, baseVal)
plotTwoPlus<-function(vals, idxName, Yname, Xname,aXlab, aYlab, bXlab, bYlab, hXlab, hYlab, className, layoutLocs, absY = FALSE, maxY = -1, cols = NULL, limitDist = 0, base0 = 0, base1 = 0) {
plotPairByIndexAbsX(vals, idxName, Yname, Xname,aXlab, aYlab, bXlab, bYlab, absY, maxY,  limitDist, base0, base1)
set0Y <- vals[vals[,idxName] == 0,Yname] - base0
set1Y <- vals[vals[,idxName] == 1,Yname] - base1
if (absY) {
set0Y <- abs(set0Y)
set1Y <- abs(set1Y)
}
YaxisLim<- axisRange(set0Y, set1Y)
testSet0<-abs(vals[vals[,className] == 0,Yname]) - base0
testSet1<-abs(vals[vals[,className] == (0.5),Yname]) - base1
YaxisLimPlus<- axisRange(testSet0, testSet0)
YaxisLim[1] <- min(YaxisLim[1], YaxisLimPlus[1])
YaxisLim[2] <- max(YaxisLim[2], YaxisLimPlus[2])
if (maxY >0) {
YaxisLim[2]<-maxY
}
boxplot(testSet0 , testSet1, names = c("Stage 1", "Stage 2"), main = "c", ylim=YaxisLim, xlab = hXlab, ylab = hYlab, col = cols)
TtestW<-wilcox.test( testSet0, testSet1)
probmax <- TtestW$p.value
print(c(length(testSet0), length(testSet1), probmax, mean(testSet0), mean(testSet1), sd(testSet0), sd(testSet1)))
}
measureStr <- "cell area"
valNames <- c("", "areaMM2")
SDmeasureStr <- "Cell area"
dispAbs <- FALSE
testSet4<-abs(cellsPair[cellsPair[,"classDist"] == 2,valNames[2]])
testSet5<-abs(cellsPair[cellsPair[,"classDist"] == (2.5),valNames[2]])
meanAreaAtDistance = mean(c(testSet4 , testSet5))
baseVal <- meanAreaAtDistance
SDmeasureStr <- sprintf("Delta %s", tolower(measureStr))
#plotTwoPlus(cellWallsPair, "imageIdx", valNames[1], "dist", stage1DistStr, measureStr, stage2DistStr, measureStr, bandedStr, boxplotYstr, layoutLocs, atLocs, TRUE)
#plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, SDmeasureStr, bandedStr, boxplotYstr,  layoutLocs, atLocs, TRUE, -1, cols = boxCols, limitDist = histWidth)
plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, "", bandedStr, "",  layoutLocs, atLocs, dispAbs, -1, cols = boxCols, limitDist = histWidth, baseVal, baseVal)
measureStr <- "cell area (mm2)"
valNames <- c("", "areaMM2")
SDmeasureStr <- "Cell area (mm2)"
dispAbs <- FALSE
testSet4<-abs(cellsPair[cellsPair[,"classDist"] == 2,valNames[2]])
testSet5<-abs(cellsPair[cellsPair[,"classDist"] == (2.5),valNames[2]])
meanAreaAtDistance = mean(c(testSet4 , testSet5))
baseVal <- meanAreaAtDistance
SDmeasureStr <- sprintf("Delta %s", tolower(measureStr))
#plotTwoPlus(cellWallsPair, "imageIdx", valNames[1], "dist", stage1DistStr, measureStr, stage2DistStr, measureStr, bandedStr, boxplotYstr, layoutLocs, atLocs, TRUE)
#plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, SDmeasureStr, bandedStr, boxplotYstr,  layoutLocs, atLocs, TRUE, -1, cols = boxCols, limitDist = histWidth)
plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, "", bandedStr, "",  layoutLocs, atLocs, dispAbs, -1, cols = boxCols, limitDist = histWidth, baseVal, baseVal)
bandedStr <- ""
measureStr <- "cell area (mm2)"
valNames <- c("", "areaMM2")
SDmeasureStr <- "Cell area (mm2)"
dispAbs <- FALSE
testSet4<-abs(cellsPair[cellsPair[,"classDist"] == 2,valNames[2]])
testSet5<-abs(cellsPair[cellsPair[,"classDist"] == (2.5),valNames[2]])
meanAreaAtDistance = mean(c(testSet4 , testSet5))
baseVal <- meanAreaAtDistance
SDmeasureStr <- sprintf("Delta %s", tolower(measureStr))
#plotTwoPlus(cellWallsPair, "imageIdx", valNames[1], "dist", stage1DistStr, measureStr, stage2DistStr, measureStr, bandedStr, boxplotYstr, layoutLocs, atLocs, TRUE)
#plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, SDmeasureStr, bandedStr, boxplotYstr,  layoutLocs, atLocs, TRUE, -1, cols = boxCols, limitDist = histWidth)
plotTwoPlus(cellsPair, "imageIdx", valNames[2], "offcentreMM", stage1DistStr, SDmeasureStr, stage2DistStr, "", bandedStr, "",  layoutLocs, atLocs, dispAbs, -1, cols = boxCols, limitDist = histWidth, baseVal, baseVal)
mean(testset4)
mean(testSet4)
mean(testSet5)
sd(testSet4)
sd(testSet5)
length(testSet4)
length(testSet5)
baseVal
testDelta0 <- testSet0 - meanAreaAtDistance
testDelta1 <- testSet1 - meanAreaAtDistance
mean(testDelta0)
sd(testDelta0)
mean(testDelta1)
sd(testDelta1)
t.test(testDelta0, testDelta1)
